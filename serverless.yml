service: mm-afterwork
package:
  include:
    - afterwork.py
    - packages

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python2.7
  region: eu-west-1

functions:
  afterwork:
    environment:
      apiKey: ${file(./conf.yml):apiKey}
      authKey: ${file(./conf.yml):authKey}
      botName: ${file(./conf.yml):botName}
      channelName: ${file(./conf.yml):channelName}
      tableName: ${file(./conf.yml):tableName}
      googleMapsApiKey: ${file(./conf.yml):googleMapsApiKey}
    handler: handler.index
    events:
      - http:
          path: afterwork
          method: post
          integration: lambda
          request:
            template:
              application/json: ${file(./s-templates.s)}
      - schedule:
          rate: cron(0 12 ? * MON-FRI *)
          enabled: true
          input:
            triggerToken: ${file(./conf.yml):authKey}


resources:
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(./conf.yml):tableName}
        AttributeDefinitions:
          -
            AttributeName: "Date"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "Date"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: "2"
          WriteCapacityUnits: "2"
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource: arn:aws:dynamodb:*:*:table/afterworks
        Roles:
          - Ref: IamRoleLambdaExecution
